<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/halo">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			
			import org.maths.Expression;
			import org.maths.XMLUtilities;
			
			private var _flow:InputFlow;
			
			public function getInstance():InputFlow 
			{
				var cname:String = flow.className;
				cname = cname.substr(0,1).toLowerCase() + cname.substr(1);
				var flowClass:Class = getClassByAlias(cname);
				return new flowClass() as InputFlow;
			}
			
			public function duplicates(inputMaker:InputMaker):Boolean {
				var f:InputFlow = inputMaker.flow;
				if(flow && f)
					return flow.duplicates(f);
				if(flow || f)
					return false;
				return true;
			}
			
			[Bindable]
			public function get flow():InputFlow
			{
				return _flow;
			}
			public function set flow(s:InputFlow):void 
			{
				_flow = s;
				addElement(flow);
			}
			
			[Bindable]
			public function get sourceSkin():Class
			{
				return flow.sourceSkin;
			}
			public function set sourceSkin(s:Class):void 
			{
				flow.sourceSkin = s;
			}
			
			private function skinNameFromClass(s:Class):String {
				return s.toString().replace("[class ","").replace("]","");
			}
			
			private var skinName:String;
			
			[Bindable]
			public function get arg0():Expression
			{
				return flow.arg0;
			}
			public function set arg0(s:Expression):void 
			{
				flow.arg0 = s;
			}
			
			[Bindable]
			public function get minimum():Number
			{
				return flow.minimum;
			}
			public function set minimum(s:Number):void 
			{
				flow.minimum = s;
			}
			
			[Bindable]
			public function get maximum():Number
			{
				return flow.maximum;
			}
			public function set maximum(s:Number):void 
			{
				flow.maximum = s;
			}
			
			[Bindable]
			public function get padVariable():String
			{
				return flow.padVariable;
			}
			public function set padVariable(s:String):void 
			{
				flow.padVariable = s;
			}
			
			public function toXML():XML {
				var fcn:String = flow.className;
				fcn = fcn.charAt(0).toLowerCase() + fcn.substr(1);
				
				trace("inputMaker: sourceSkin = " + sourceSkin.toString() + " : " + sourceSkin.className);
				
				var im:XML = <inputMaker type={fcn} skin={skinNameFromClass(sourceSkin)} varName={padVariable}/>;
				if(arg0)
					im.@arg0 = arg0.displayString();
				if(minimum)
					im.@minimum = minimum.toString();
				if(maximum)
					im.@maximum = maximum.toString();
				
				return im;
			}
			
			
			public function fromXML(fm:XML):Boolean {
				
				var flowClassName:String = XMLUtilities.stringAttr(fm.@type, "InputFlow");
				try {
					var flowClass:Class = getClassByAlias(flowClassName);
				}
				catch(e:Error) {
					Alert.show(flowClassName, "Unknown InputMaker class", Alert.OK);
					return false;
				}
				_flow = new flowClass();
				
				skinName = XMLUtilities.stringAttr(fm.@skin, "Skin");
 				var skinClass:Class = getClassByAlias(skinName);
				if(!skinClass) {
					Alert.show(skinName, "Unknown InputMaker skin", Alert.OK);
					return false;					
				}
				_flow.sourceSkin = skinClass;
				
				var arg:String = XMLUtilities.stringAttr(fm.@arg0, null);
				if(arg) {
					try {
						_flow.arg0 = new Expression(arg);
					}
					catch (e:Error) {
						Alert.show(arg, "Bad Expression", Alert.OK);
						return false;											
					}
				}
				
				minimum = XMLUtilities.numberAttr(fm.@minimum, 0);
				maximum = XMLUtilities.numberAttr(fm.@maximum, 0);

				var s:String = XMLUtilities.stringAttr(fm.@varName, null);
				if(s) {
					padVariable = s;
				}
				
				addElement(_flow);
				return true;
			}

		]]>
	</fx:Script>
</s:Group>
